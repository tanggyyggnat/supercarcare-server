// // // This is your Prisma schema file,
// // // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // generator client {
// //   provider = "prisma-client-js"
// // }

// // datasource db {
// //   provider = "mysql"
// //   url      = env("DATABASE_URL")
// // }

// // model Account {
// //   id  Int        @id @default (autoincrement())
// //   account_name String     @unique
// //   password     String
// //   role         ROLE
// //   customer     Customer?
// //   employee     Employee?
// // }

// // enum ROLE {
// //   CUSTOMER
// //   EMPLOYEE
// // }

// // model Employee {
// //   id       Int      @id @default(autoincrement())
// //   job_id       Int
// //   emp_name     String
// //   emp_surname  String
// //   emp_phone    String
// //   emp_salary   Int
// //   emp_hiredate DateTime @default(now())
// //   account_id   Int?
// //   account      Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
// //   job_role     JobRole  @relation(fields: [job_id], references: [id], onDelete: Cascade)
// //   schedule     Schedule[]
// //   // Define foreign key constraints
// //   @@index([job_id], name: "employee_job_role_job_id")
// //   @@index([account_id], name: "employee_account_account_id")
// // }


// // model JobRole {
// //   id      Int       @id @default(autoincrement())
// //   job_name    String
// //   employee    Employee[]
// // }

// // model Customer {
// //   id      Int      @id @default(autoincrement())
// //   cust_name    String
// //   cust_surname String
// //   cust_phone   String?
// //   cust_email   String
// //   account_id   Int      @unique
// //   account      Account  @relation(fields: [account_id], references: [id], onDelete: Cascade)
// //   booking Booking[]
// //   car Car[]
// //   // Define foreign key constraint
// //   @@index([account_id], name: "customer_user_user_id")
// // }

// // model Booking {
// //   id        Int      @id @default(autoincrement())
// //   cust_id           Int
// //   car_id            Int
// //   service_type      SERVICE_TYPE
// //   appointmentDate   DateTime
// //   description       String?
// //   customer          Customer @relation(fields: [cust_id], references: [cust_id], onDelete: Cascade)
// //   car               Car @relation(fields: [car_id], references: [car_id], onDelete: Cascade)
// //   schedule          Schedule
// //   progress          Progress
// //   payment           Payment
// // }

// // enum SERVICE_TYPE {
// //   CAR_INSPECTION
// //   CAR_REPAIR
// //   CAR_WASHING
// // }

// // model Schedule {
// //   id    Int     @id @default(autoincrement())
// //   emp_id         Int
// //   booking_id     Int
// //   scheduled_date DateTime
// //   scheduled_time DateTime
// //   employee       Employee @relation(fields: [emp_id], references: [emp_id], onDelete: Cascade)
// //   booking        Booking @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade)
// // }

// // model Progress {
// //   id       Int       @id @default(autoincrement())
// //   booking_id        Int
// //   step_description  String?
// //   step_status       String
// //   timestamp         DateTime
// //   booking           Booking   @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade)

// //   // Define foreign key constraints
// //   @@index([booking_id], name: "progress_booking_booking_id")
// // }

// // model Payment {
// //   id     Int       @id @default(autoincrement())
// //   booking_id     Int
// //   amount_money  Int
// //   payment_method String
// //   banking_name   String?
// //   account_number String?
// //   payment_date   DateTime
// //   payment_slip   Bytes? // Assuming your database supports BLOB data type

// //   booking        Booking   @relation(fields: [booking_id], references: [booking_id], onDelete: Cascade)

// //   // Define foreign key constraints
// //   @@index([booking_id], name: "payment_booking_booking_id")
// // }

// // model Car {
// //   id         Int      @id
// //   license_plate String   @unique
// //   cust_id        Int
// //   car_brand      String
// //   customer       Customer @relation(fields: [cust_id], references: [cust_id], onDelete: Cascade)
// //   booking        Booking[]
// //   carHistory     CarHistory[]
// //   // Define foreign key constraint
// //   @@index([cust_id], name: "car_customer_cust_id")
// // }

// // model Stock {
// //   id    Int      @id @default(autoincrement())
// //   stock_name  String
// //   stock_num   Int
// //   arHistory     CarHistory[]
// // }

// // model CarHistory {
// //   car_id          Int        // Composite primary key part 1
// //   stock_id        Int        // Composite primary key part 2
// //   usage_date      DateTime
// //   quantity_usage  Int

// //   // Define composite primary key constraint
// //   @@id([car_id, stock_id])

// //   // Define foreign key constraints
// //   car             Car      @relation(fields: [car_id], references: [car_id], onDelete: Cascade)
// //   stock           Stock      @relation(fields: [stock_id], references: [stock_id], onDelete: Cascade)
// // }


// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model Movie {
//   id              Int             @id @default(autoincrement())
//   title           String
//   duration        Int
//   synopsis        String?
//   imageUrl        String?
//   trailerUrl      String?
//   movieCategories MovieCategory[]
//   MovieSchedule   MovieSchedule[]
//   previewURL      String?
// }

// model MovieCategory {
//   movieId    Int
//   movie      Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
//   categoryId Int
//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

//   @@id([movieId, categoryId])
// }

// model Category {
//   id       Int             @id @default(autoincrement())
//   name     String
//   category MovieCategory[]
// }

// model Theatre {
//   id             Int             @id @default(autoincrement())
//   name           String
//   theatreType    THEATRE_TYPE?   @default(TWOD)
//   seats          Seat[]
//   movieSchedules MovieSchedule[]
// }

// enum THEATRE_TYPE {
//   TWOD
//   THREED
//   FOURD
//   IMAX
// }

// model MovieSchedule {
//   id        Int      @id @default(autoincrement())
//   startTime DateTime
//   movieId   Int
//   theatreId Int
//   movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
//   theatre   Theatre  @relation(fields: [theatreId], references: [id], onDelete: Cascade)
//   tickets   Ticket[]
// }

// model Ticket {
//   id            Int           @id @default(autoincrement())
//   price         Int // ราคา
//   accountId     Int
//   scheduleId    Int
//   seatId        Int
//   reservationId Int
//   // Ticket เนี่ยจะต้องสามารถบอกข้อมูลได้หมดเลยว่า ตั๋วนี้ จองโดยใคร , หนังรอบไหน , ที่นั่งไหน 
//   account       Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
//   movieSchedule MovieSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
//   seat          Seat          @relation(fields: [seatId], references: [id], onDelete: Cascade)
//   reservation   Reservation   @relation(fields: [reservationId], references: [id], onDelete: Cascade)

//   @@unique([scheduleId, seatId]) //ต้องคนละเวลา
// }

// model Seat {
//   id        Int       @id @default(autoincrement())
//   number    String
//   seatType  SEAT_TYPE @default(NORMAL)
//   theatreId Int
//   theatre   Theatre   @relation(fields: [theatreId], references: [id], onDelete: Cascade)
//   price     Int       @default(100)
//   tickets   Ticket[] // เพราะว่า ที่นั่งนี้ อาจจะมีหลายตั๋วแต่ว่า แต่ละตั๋วมันคนละเวลากัน! แต่เป็นที่นั่งเดียวกัน
// }

// enum SEAT_TYPE {
//   NORMAL
//   HONEYMOON
//   FIRSTCLASS
//   IMAX
//   FOURDX
// }

// model Reservation {
//   id              Int      @id @default(autoincrement())
//   reservationCode String
//   createdAt       DateTime @default(now())
//   tickets         Ticket[]
// }

// model Account {
//   id           Int      @id @default(autoincrement())
//   username     String
//   password     String
//   email        String   @unique
//   tickets      Ticket[]
//   profile      Profile?
//   created_date DateTime @default(now())
//   updated_date DateTime @updatedAt
//   role         Role     @default(USER)
// }

// enum Role {
//   USER
//   ADMIN
// }

// model Profile {
//   id            Int     @id
//   account       Account @relation(fields: [id], references: [id])
//   first_name    String
//   last_name     String
//   nickname      String
//   idcard_number String
//   phone         String
// }






// model BookingDetail {
//   bookingId       Int   @unique
//   subServiceId    Int
//   booking         Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
//   subService      Subservice @relation(fields: [subServiceId], references: [id], onDelete: Cascade)
// }


// model Progress {
//   id               Int       @id @default(autoincrement())
//   bookingId        Int
//   stepDescription  String
//   stepStatus       STEP_STATUS
//   timestamp        DateTime   @default(now())
//   booking          Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
// }




